#!markdown

# C# Higher-Order function

Function as parameter and return value

## Pass `Action<>` as parameter

#!csharp

void SqlExecute1() => int.Parse("1");
void SqlExecute2(string value) => int.Parse(value);

string SqlQuery1(string key) => key;
int SqlQuery2(string key) => int.Parse(key);

#!csharp

void Command1()
{
    try
    {
        SqlExecute1();
    }
    catch (Exception ex)
    {
        Console.WriteLine(ex.Message);
    }
}

void Command2(string value)
{
    try
    {
        SqlExecute2(value);
    }
    catch (Exception ex)
    {
        Console.WriteLine(ex.Message);
    }
}

#!csharp

void TryExecute(Action action)
{
    try
    {
        action();
    }
    catch (Exception ex)
    {
        Console.WriteLine(ex.Message);
    }
}

TryExecute(SqlExecute1);
TryExecute(() => SqlExecute2("1"));
TryExecute(() => 
    {
        SqlExecute1();
        SqlExecute2("1");
    });

#!markdown

## Pass `Func<>` as parameter

#!csharp

string Query1(string key)
{
    try
    {
        return SqlQuery1(key);
    }
    catch (Exception ex)
    {
        Console.WriteLine(ex.Message);
        return string.Empty;
    }
}

int Query2(string key)
{
    try
    {
        return SqlQuery2(key);
    }
    catch (Exception ex)
    {
        Console.WriteLine(ex.Message);
        return 0;
    }
}

#!csharp

TResult TryQuery<TKey, TResult>(Func<TKey, TResult> func, TKey key, TResult defaultValue)
{
    try
    {
        return func(key);
    }
    catch (Exception ex)
    {
        Console.WriteLine(ex.Message);
        return defaultValue;
    }
}

display(TryQuery(SqlQuery1, "1", string.Empty));
display(TryQuery((string key) => SqlQuery2(key), "2", 0));

#!markdown

# [Async Disposables The Easy Way](https://haacked.com/archive/2021/12/10/async-disposables/)

## Function for later execution

#!csharp

Console.WriteLine("Working on it...");
try {
    Console.WriteLine("Processing!");
    throw new Exception();
}
finally {
    Console.WriteLine("Done!");
}

#!csharp

using System.Threading;

public static class Disposable
{
    public static IDisposable Create(Action onDispose) =>
        new ActionDisposable(onDispose);

    private class ActionDisposable : IDisposable
    {
        volatile Action onDispose;

        public ActionDisposable(Action onDispose)
        {
            this.onDispose = onDispose;
        }

        public void Dispose()
        {
            Interlocked.Exchange(ref this.onDispose, null)?.Invoke();
        }
    }
}

#!csharp

{
    Console.WriteLine("Working on it...");
    using var scope = Disposable.Create(
        () => Console.WriteLine("Done!"));

    Console.WriteLine("Processing!");
    throw new Exception();
    // scope is disposed and Working on it... is printed to console 
}

#!markdown

# Return function as return value

Extend from "1.3 Design Patterns - Hollywood principle.dib"

#!csharp

void Divide(int top, int bottom,
    Action ifZero, Action<int> ifSuccess)
{
    if (bottom == 0)
        ifZero();
    else
        ifSuccess(top / bottom);
}

#!csharp

Action<int, int> Divide1(Action ifZero, Action<int> ifSuccess) =>
    (int top, int bottom) =>
    {
        if (bottom == 0)
            ifZero();
        else
            ifSuccess(top / bottom);
    };

var ifZero1 = () => Console.WriteLine("Bad");
var ifSuccess1 = (int result) => Console.WriteLine($"Good {result}");
var safeDivide = Divide1(ifZero1, ifSuccess1);

safeDivide(6, 4);
safeDivide(6, 0);
